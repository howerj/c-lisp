(define (main)
  (eval-expr '(main) '() (repl (read) '())))

(define (repl form procedures)
  (cond ((eof? form) procedures)
        ((define? form) (repl (read)
                              (bind (list1 (caadr form))
                                    (list1 (cons (cdadr form) (cddr form)))
                                    procedures)))
        (#t (write (eval-expr form '() procedures))
            (write-char #\newline)
            (repl (read) procedures))))

(define (define? form)
  (cond ((pair? form) (same? (car form) 'define))
        (#t #f)))

(define (eval-expr expr env procedures)
  (cond ((symbol? expr) (value expr env))
        ((==? #f (pair? expr)) expr)
	((same? (car expr) 'quote) (cadr expr))
	((same? (car expr) 'cond) (eval-cond (cdr expr) env procedures))
	(#t (apply-proc (car expr)
                        (lookup (car expr) procedures)
                        (eval-exprs (cdr expr) env procedures)
                        procedures))))

(define (apply-proc rator slot args procedures)
  (cond ((==? #f slot) (apply-prim rator args))
	(#t (eval-seq (cdar slot) (bind (caar slot) args '()) procedures))))

(define (eval-exprs exprs env procedures)
  (cond ((null? exprs) '())
	(#t (cons (eval-expr (car exprs) env procedures)
                  (eval-exprs (cdr exprs) env procedures)))))

(define (eval-seq exprs env procedures)
  (cond ((null? exprs) #f)
        ((null? (cdr exprs))
         (eval-expr (car exprs) env procedures))
	(#t (eval-expr (car exprs) env procedures)
            (eval-seq (cdr exprs) env procedures))))

(define (eval-cond clauses env procedures)
  (cond ((null? clauses) (error 'cond-fell-off-end clauses))
        ((eval-expr (caar clauses) env procedures)
	 (eval-seq (cdar clauses) env procedures))
	(#t (eval-cond (cdr clauses) env procedures))))

(define (bind vars args env)
  (cond ((same-length? vars args) (cons (cons vars args) env))
	(#t (error 'bind (list2 vars args)))))

(define (value name env)
  (value1 name (lookup name env)))

(define (value1 name slot)
  (cond (slot (car slot))
        (#t (error 'unbound name))))

(define (lookup name env)
  (cond ((null? env) #f)
	(#t (lookup1 name (caar env) (cdar env) env))))

(define (lookup1 name vars vals env)
  (cond ((null? vars) (lookup name (cdr env)))
	((same? name (car vars)) vals)
	(#t (lookup1 name (cdr vars) (cdr vals) env))))

(define (apply-prim proc args)
  (cond ((same? proc '==?)          (==? (car args) (cadr args)))
        ((same? proc 'cons)         (cons (car args) (cadr args)))
        ((same? proc 'car)          (car (car args)))
        ((same? proc 'cdr)          (cdr (car args)))
        ((same? proc 'null?)        (null? (car args)))
        ((same? proc 'pair?)        (pair? (car args)))
        ((same? proc 'symbol?)      (symbol? (car args)))
        ((same? proc 'string?)      (string? (car args)))
        ((same? proc 'boolean?)     (boolean? (car args)))
        ((same? proc 'char?)        (char? (car args)))
        ((same? proc 'write-char)   (write-char (car args)))
        ((same? proc 'read-char)    (read-char))
        ((same? proc 'peek-char)    (peek-char))
        ((same? proc 'explode)      (explode (car args)))
        ((same? proc 'implode)      (implode (car args)))
        ((same? proc 'string->list) (string->list (car args)))
        ((same? proc 'list->string) (list->string (car args)))
        ((same? proc 'eof-object?)  (eof-object? (car args)))
        ((same? proc 'abort)        (abort))
        (#t (error 'unknown-procedure proc))))
