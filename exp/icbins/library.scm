(define (list1 z)       (cons z '()))
(define (list2 y z)     (cons y (cons z '())))
(define (list3 x y z)   (cons x (cons y (cons z '()))))

(define (caar x) (car (car x)))
(define (cdar x) (cdr (car x)))
(define (cadr x) (car (cdr x)))
(define (cddr x) (cdr (cdr x)))
(define (caadr x) (car (car (cdr x))))
(define (cdadr x) (cdr (car (cdr x))))

(define (same? x y)
  (cond ((==? x y) #t)
        ((symbol? x)
         (cond ((symbol? y) (each-==? (explode x) (explode y)))
               (#t #f)))
        (#t #f)))

(define (each-==? xs ys)
  (cond ((null? xs) (null? ys))
        ((null? ys) #f)
        ((==? (car xs) (car ys))
         (each-==? (cdr xs) (cdr ys)))
        (#t #f)))
        
(define (same-length? xs ys)
  (cond ((null? xs) (null? ys))
        ((null? ys) #f)
        (#t (same-length? (cdr xs) (cdr ys)))))

(define (length=1? xs)
  (same-length? xs '(x)))

(define (memq x ls)
  (cond ((null? ls) #f)
        ((same? x (car ls)) ls)
        (#t (memq x (cdr ls)))))

(define (whitespace? c)  (memq c '(#\space #\tab #\return #\newline)))
(define (punctuation? c) (memq c '(#\# #\' #\( #\) #\")))

(define (error complaint irritant)
  (write 'error:)
  (write-char #\space)
  (write complaint)
  (write-char #\space)
  (write irritant)
  (write-char #\newline)
  (abort))

(define (write x)
  (cond ((null? x)
         (write-char #\()
         (write-char #\)))
        ((boolean? x)
         (write-char #\#)
         (write-char (cond (x #\t) (#t #\f))))
        ((char? x)
         (write-char #\#)
         (write-char #\\)
         (write-char-literal x))
        ((symbol? x)
         (write-each-char (explode x)))
        ((string? x)
         (write-char #\")
         (write-each-char (string->list x))
         (write-char #\"))
        ((pair? x)
         (write-char #\()
         (write (car x))
         (write-tail (cdr x))
         (write-char #\)))
        ((eof-object? x)
         (write-char #\#)
         (write '<eof>))
        (#t
         (error 'cant-write '<something>))))

(define (write-each-char chars)
  (cond ((null? chars))
        (#t (write-char (car chars))
            (write-each-char (cdr chars)))))

(define (write-tail xs)
  (cond ((null? xs))
        ((pair? xs)
         (write-char #\space)
         (write (car xs))
         (write-tail (cdr xs)))
        (#t
         (write-char #\space)
         (write-char #\.)
         (write-char #\space)
         (write xs))))

(define (write-char-literal c)
  (cond ((==? c #\space)   (write 'space))
        ((==? c #\tab)     (write 'tab))
        ((==? c #\return)  (write 'return))
        ((==? c #\newline) (write 'newline))
        (#t (write-char c))))

(define (read)
  (read-1 (read-char)))

(define (eof? x)
  (cond ((eof-object? x) #t)
        ((same? x (implode '(#\* #\e #\o #\f #\*)))
         (read-char)
         #t)
        (#t #f)))

(define (read-1 c)
  (cond ((eof? c) c)
        ((whitespace? c) (read))
        ((==? c #\#) (read-hash (read-char)))
        ((==? c #\') (list2 'quote (read)))
        ((==? c #\() (read-tail (read-char)))
        ((==? c #\)) (error 'mismatched-parens 'read-1))
        ((==? c #\") (list->string (read-string-literal (read-char))))
        (#t          (implode (read-symbol c)))))

(define (read-tail c)
  (cond ((eof? c) (error 'premature-eof 'read-tail))
        ((whitespace? c) (read-tail (read-char)))
        ((==? c #\)) '())
        (#t (read-tail-1 (read-1 c)))))

(define (read-tail-1 e)
  (cons e (read-tail (read-char))))

(define (read-hash c)
  (cond ((eof? c) (error 'premature-eof 'read-hash))
        ((==? c #\f) #f)
        ((==? c #\t) #t)
        ((==? c #\\) (read-char-literal (read-char)))
        (#t (error 'unknown-hash-char c))))

(define (read-char-literal c)
  (cond ((eof? c) (error 'premature-eof 'read-char-literal))
        (#t (read-char-literal-1 (read-symbol c)))))

(define (read-char-literal-1 cs)
  (read-char-literal-2 cs (implode cs)))

(define (read-char-literal-2 cs symbol)
  (cond ((same? symbol 'space)   #\space)
        ((same? symbol 'tab)     #\tab)
        ((same? symbol 'return)  #\return)
        ((same? symbol 'newline) #\newline)
        ((length=1? cs) (car cs))
        (#t (error 'unknown-char-constant symbol))))

(define (read-symbol c)
  (cons c (read-symbol-1 (peek-char))))

(define (read-symbol-1 c)
  (cond ((eof? c) '())
        ((whitespace? c) '())
        ((punctuation? c) '())
        (#t (read-char)
            (read-symbol c))))

(define (read-string-literal c)
  (cond ((eof? c) (error 'premature-eof 'read-string-literal))
        ((==? c #\") '())
        ((==? c #\\) (cons (read-char) (read-string-literal (read-char))))
        (#t (cons c (read-string-literal (read-char))))))
