(define a '((1 x) (2 y) (3 z)))
(environment)
#hello
+ # hello
(trace '+ t)
(+ 2 2)
(trace + t)
(+ 2 2)
(trace * t)
(factorial 3)
(trace '* t)
(factorial 3)
(trace-level! *trace-mark*)
(trace-level! *trace-marked*)
(factorial 3)
(trace-level! *trace-marked*)
(factorial 3)
(trace '* t)
(factorial 3)
(trace * t)
(trace-level! *trace-marked*)
(factorial 3)
*
factorial
(trace-level! *trace-all*)
(factorial 3)
(factorial 2)
(trace '*)
(trace '* t)
(trace-level! *trace-marked*)
(factorial ')
(trace 'factorial t)
(factorial 2)
(factorial 3)
(trace 'x t)
(factorial 3)
(trace '+ t)
(factorial 3)
(trace + t)
(factorial 3)
+
(open *file-out* "test.log")
(open *file-in* "test.log")
(+)
(+ 1)
(open "file.log" *file-in*)
(log)
(log 10)
(gc *gc-off*)
(gc *gc-postpone*)
(factorial 300)
(monte-carlo-pi 4000)
(gc *gc-on*)
(gc *gc-off*)
(gc *gc-on*)
()
(monte-carlo-pi 4000)
(coerce *string* 1.33)
error
((lambda (x) (* x x)) 4)
(define square (lambda (x) (* x x)))
(square -5)
(define print-me (flambda (x) x))
(print-me hello world)
(print-me hello 'world)
(print-me hello 'world (+ 2 2))
(print-me)
(* 9 9(
(* 9 9)
(environment)
((lambda (x) (environment)) 4)
(let (x 3) (y (+ x x)) y)
(let* (x 3) (y (+ x x)) y)
(define baz (lambda (y) (let (foo 1) (bar 2) (+ (foo y) bar))))
(baz 2)
(define baz (lambda (y) (let* (foo 1) (bar 2) (+ (foo y) bar))))
(baz 2)
(define baz (lambda (y) (let* (foo 1) (bar 2) (+ (* foo y) bar))))
(baz 2)
(baz 5)
(define baz (lambda (y) (let* (foo -2) (bar 2) (+ (* foo y) bar))))
(baz 5)
(let* (foo 1) (let* (bar 2) (environment)))
(environment)
(set! X 3)
X
(set! X 3)
X
(set! X 3)
X
(gcd 50 30)
(random)
(read)
(get-char)
(get-delim "m")
(get-char)
(get-char) (get-char)
2 2
(get-delim ".")
